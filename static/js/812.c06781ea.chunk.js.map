{"version":3,"file":"static/js/812.c06781ea.chunk.js","mappings":"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","sources":["pages/modules/bitcoin-basics/how-it-works/intro.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { ContinueButton } from '../../../../components/ui';\nimport '../../../../components/ModuleCommon.css';\n\nexport default function HowItWorksIntro() {\n  const [currentConcept, setCurrentConcept] = useState(0);\n  const [userAnswer, setUserAnswer] = useState(null);\n  const [showExplanation, setShowExplanation] = useState(false);\n\n  const concepts = [\n    {\n      id: 'record_keeping',\n      title: 'Keeping Track of Money',\n      scenario: \"Imagine you and 9 friends are sharing expenses for a group vacation. You need to track who paid for what and who owes money to whom.\",\n      question: \"What's the most trustworthy way to keep track of everyone's payments?\",\n      options: [\n        { id: 'one_person', text: \"One person keeps a notebook with all transactions\", risk: 'high' },\n        { id: 'everyone', text: \"Everyone keeps their own identical copy of all transactions\", risk: 'low' },\n        { id: 'bank', text: \"Use a bank to track everything\", risk: 'medium' },\n        { id: 'memory', text: \"Just remember who paid what\", risk: 'very_high' }\n      ],\n      explanation: {\n        correct: 'everyone',\n        why: \"When everyone has the same records, no one can cheat or 'lose' the notebook. This is exactly how Bitcoin works - thousands of people keep identical records of all Bitcoin transactions.\",\n        bankingAnalogy: \"Banks keep ONE record that only they control. Bitcoin keeps THOUSANDS of identical records that everyone can verify.\",\n        bitcoinConnection: \"Bitcoin's 'mathematical code' is just the rules for keeping these records consistent across thousands of computers.\"\n      }\n    },\n    {\n      id: 'consensus',\n      title: 'Agreeing on What\\'s True',\n      scenario: \"Your group vacation notebook shows you paid $100 for dinner. But what if someone claims you only paid $50?\",\n      question: \"How do you prove what really happened?\",\n      options: [\n        { id: 'majority', text: \"Ask everyone - whatever most people remember is true\", risk: 'low' },\n        { id: 'authority', text: \"One person decides who's right\", risk: 'high' },\n        { id: 'original', text: \"Check the original receipt\", risk: 'medium' },\n        { id: 'fight', text: \"Argue until someone gives up\", risk: 'very_high' }\n      ],\n      explanation: {\n        correct: 'majority',\n        why: \"When most people agree on the same facts, it's extremely hard for one person to lie successfully. Bitcoin uses this same principle.\",\n        bankingAnalogy: \"Banks: 'Trust us, our computer says you have $X.' Bitcoin: '51% of thousands of computers agree you have X bitcoin.'\",\n        bitcoinConnection: \"This is what 'consensus' means - the majority of computers must agree before any Bitcoin transaction is accepted as real.\"\n      }\n    }\n  ];\n\n  const currentConcept_data = concepts[currentConcept];\n\n  const handleAnswer = (optionId) => {\n    setUserAnswer(optionId);\n    setShowExplanation(true);\n  };\n\n  const handleContinue = () => {\n    if (currentConcept < concepts.length - 1) {\n      setCurrentConcept(currentConcept + 1);\n      setUserAnswer(null);\n      setShowExplanation(false);\n    }\n  };\n\n  return (\n    <div className=\"step-content how-bitcoin-works\">\n      <div className=\"module-header-box\">\n        <h2>How Bitcoin Actually Works</h2>\n        <p>Let's understand the core ideas through simple examples</p>\n      </div>\n\n      <div className=\"content-text\">\n        <div className=\"concept-demo\">\n          <h3>{currentConcept_data.title}</h3>\n          <p className=\"scenario-text\">{currentConcept_data.scenario}</p>\n          \n          <div className=\"question-section\">\n            <h4>{currentConcept_data.question}</h4>\n            \n            {!userAnswer && (\n              <div className=\"concept-options\">\n                {currentConcept_data.options.map((option) => (\n                  <button\n                    key={option.id}\n                    className={`concept-option risk-${option.risk}`}\n                    onClick={() => handleAnswer(option.id)}\n                  >\n                    {option.text}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {showExplanation && (\n            <div className={`concept-feedback ${userAnswer === currentConcept_data.explanation.correct ? 'correct' : 'incorrect'}`}>\n              <div className=\"feedback-text\">\n                <p><strong>You chose:</strong> \"{currentConcept_data.options.find(opt => opt.id === userAnswer)?.text}\"</p>\n                {userAnswer === currentConcept_data.explanation.correct ? (\n                  <p>‚úÖ <strong>Excellent choice!</strong> You understand this concept well.</p>\n                ) : (\n                  <p>ü§î <strong>Let's explore this further.</strong> Here's why another option might work better:</p>\n                )}\n              </div>\n              \n              <div className=\"explanation-text\">\n                <div className=\"correct-answer\">\n                  <strong>üí° Why this matters:</strong> {currentConcept_data.explanation.why}\n                </div>\n                \n                <div className=\"learning-point\">\n                  <strong>üè¶ Banking vs Bitcoin:</strong> {currentConcept_data.explanation.bankingAnalogy}\n                </div>\n                \n                <div className=\"bitcoin-connection\">\n                  <strong>üü† Bitcoin Connection:</strong> {currentConcept_data.explanation.bitcoinConnection}\n                </div>\n              </div>\n\n              {currentConcept < concepts.length - 1 ? (\n                <button className=\"continue-button\" onClick={handleContinue}>\n                  Next Concept ‚Üí\n                </button>\n              ) : (\n                <ContinueButton>\n                  Learn About Proof of Work ‚Üí\n                </ContinueButton>\n              )}\n            </div>\n          )}\n        </div>\n        \n        <div className=\"progress-indicator\">\n          <div className=\"progress-dots\">\n            {concepts.map((_, index) => (\n              <div \n                key={index}\n                className={`progress-dot ${index === currentConcept ? 'active' : ''} ${index < currentConcept ? 'completed' : ''}`}\n              />\n            ))}\n          </div>\n          <p>Concept {currentConcept + 1} of {concepts.length}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["HowItWorksIntro","_currentConcept_data$","currentConcept","setCurrentConcept","useState","userAnswer","setUserAnswer","showExplanation","setShowExplanation","concepts","id","title","scenario","question","options","text","risk","explanation","correct","why","bankingAnalogy","bitcoinConnection","currentConcept_data","_jsxs","className","children","_jsx","map","option","concat","onClick","handleAnswer","optionId","find","opt","length","handleContinue","ContinueButton","_","index"],"sourceRoot":""}